package leet_0862

import "testing"

// 表格驱动测试
var tests = []struct {
	A   []int
	K   int
	res int
}{
	{[]int{48, 99, 37, 4, -31}, 140, 2},
	{[]int{1}, 1, 1},
	{[]int{1, 2}, 4, -1},
	{[]int{2, -1, 2}, 3, 3},
	{[]int{17, 85, 93, -45, -21}, 150, 2},
	{[]int{84, -37, 32, 40, 95}, 167, 3},
	{[]int{17985, -36292, -23941, 80618, 20594, -6181, 9181, 65796, -25716, 66593, -6873, 34062, 29878, 852, -4767, -36415, 11783, 8085, -41063, -39940, 74284, 66272, 82385, 51634, -48550, 9028, -30777, 86509, 44623, 9413, -38369, -1822, 46408, 35217, 72635, -16560, 85373, 52105, 39477, 3852, 45974, -21593, 15481, 47280, 73889, -42981, 54978, 95169, -19615, 93133}, 387303, 11},
	{[]int{53952, 44381, 64075, -23059, 96450, 44802, 62276, 60170, 21965, 32867, 85675, 70631, 57844, 7725, -39329, 22369, 70574, 7000, -23193, 1957, -30375, -42591, 3613, 43095, 28633, 84607, -22050, -33037, 4666, -12940, 57726, 94600, 65518, -29369, -24184, 28961, 7030, -33310, 36654, 62401, 64786, 57498, 52077, -24065, 8403, -8422, 37241, 52045, -3754, 1173, 58699, 86641, 19682, 81773, -42337, 69397, -11474, 20692, 62796, 36034, 72923, 36074, 60966, 51802, 9802, 43042, -32817, -16378, 54513, -27960, 32219, 62196, -23801, -16394, 40142, 54471, 71253, 44179, 1043, 28631, 93625, 18936, -7030, 86791, 91671, 72287, 98459, 61635, 74292, -48626, 22734, 82408, -15057, 41639, 28649, 11272, -187, -29328, 15828, 31785}, 906158, 20},
	{[]int{-403, 160, 143, 652, -60, 738, 70, 904, 60, 111, -387, 917, 111, 356, -349, 962, 158, 340, -175, 680, 6, 352, 755, 141, -20, -168, -271, -439, 699, 437, 724, 737, 813, 696, 868, 911, -201, 702, -247, 266, -124, -461, 601, 799, 935, 257, -310, 730, 134, 620, 232, 93, 834, 989, 457, -408, 471, -359, 744, 813, -301, 481, 674, 884, 258, 65, -305, -46, 785, -223, 876, 970, 109, 24, 37, 860, 440, 766, -220, -188, -460, 562, 865, -477, 700, -209, -99, 634, -110, -255, -373, 231, 145, 151, 120, -324, 827, -70, 446, 369, 931, -122, 658, 10, 462, 98, -446, 272, 186, 859, 293, 823, 956, 813, 336, 35, -407, 146, 871, -129, -316, 77, -312, 876, 722, 705, 752, -156, 12, 135, 168, 875, 430, -498, 972, 296, 449, 986, 881, 464, -260, 477, 437, 589, 202, -201, -21, 513, 10, 914, 454, 776, -465, 189, -314, -314, -103, 592, 439, 457, 120, -27, -495, 291, -167, 759, 311, 585, -58, -118, 134, -464, -147, 125, 464, -499, 176, -141, 78, -466, 413, 560, -232, -290, -482, 433, 747, 929, 143, 356, -146, -402, -495, -316, 395, 179, -53, 247, 134, 155, 973, 37, 230, 447, -305, 473, -349, 457, 22, 567, -369, -306, 775, -369, 675, -284, 124, 746, 575, 476, -112, 734, -92, 550, -46, 864, 166, 137, 139, 337, 426, 77, 844, 859, -421, 6, 276, 253, 189, -375, 581, -131, -168, 71, -480, 355, 810, 801, 666, -32, 535, 279, 837, 918, 982, 227, 993, -157, -178, 478, -467, 619, 677, -445, 115, -315, 947, 929, -43, 296, -183, 369, 232, -347, 773, 692, -124, -246, 175, 303, -118, -215, -244, 655, 900, -232, 175, 648, -207, 662, 959, 577, 347, -318, 885, 467, 772, -190, -498, 526, -12, -389, 904, 169, 334, 812, 620, 579, -70, -411, 779, 819, -106, 956, -480, -30, 799, 212, 109, 837, 985, -348, 400, 368, 655, 774, -475, 994, -197, 342, 689, -326, 698, 412, 996, 731, -500, 530, -117, -13, 23, 221, -78, 322, 559, 408, -7, 359, -389, -168, 468, -215, 200, 929, -398, 90, 506, -64, 277, 622, 913, -280, 354, 184, 3, 855, -105, -231, 328, 339, -175, 385, 455, -260, 775, 615, 849, 26, 596, 164, 508, 335, 701, 416, -307, 66, 31, 661, -262, -152, -363, 275, -395, 36, 639, 367, -250, 993, -444, -88, 68, -438, 218, 761, -304, -395, 864, -217, -140, -465, 735, 329, 314, 476, 955, 996, -81, -185, 147, -240, 265, 395, 116, 743, 856, 370, 913, 872, 467, 209, 450, 442, 809, 81, 105, -306, 645, -286, -277, -367, -163, -369, -151, 71, 5, 672, 259, 517, 386, 532, -150, 891, 114, -236, 560, 986, -262, 715, 586, -388, -365, -233, 440, 659, 394, -43, -69, 596, 65, -11, 348, -327, -443, 895, 407, 526, 450, 8, -487, 136, 367, 972, 912, 80, 969, -233, 482, -21, 128, 536, 237, 246, 614, -160, 654, 873, -194, -118, -295, -236}, 2122, 3},
	{[]int{39353, 64606, -23508, 5678, -17612, 40217, 15351, -12613, -37037, 64183, 68965, -19778, -41764, -21512, 17700, -23100, 77370, 64076, 53385, 30915, 18025, 17577, 10658, 77805, 56466, -2947, 29423, 50001, 31803, 9888, 71251, -6466, 77254, -30515, 2903, 76974, -49661, -10089, 66626, -7065, -46652, 84755, -37843, -5067, 67963, 92475, 15340, 15212, 54320, -5286}, 207007, 4},
	{[]int{75, -32, 50, 32, 97}, 129, 2},
}

func TestShortestSubarray(t *testing.T) {
	for _, tt := range tests {
		res := ShortestSubarray(tt.A, tt.K)
		if res != tt.res {
			t.Errorf("input: A = %v, K = %d, expected %d, but got %d",
				tt.A, tt.K, tt.res, res)
		}
	}
}
